package main

import (
	"fmt"
	"sync"
)

/*
Разработать конвейер чисел. Даны два канала:
в первый пишутся числа (x) из массива,
во второй — результат операции x*2,
после чего данные из второго канала должны выводиться в stdout.
*/

func main() {
	// Инициализируем массив и заполняем его
	arr := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

	// Создаем 2 канала с размером буфера равным длине массива
	in := make(chan int, len(arr))
	out := make(chan int, len(arr))

	// Запускаем анонимную горутину
	go func() {
		defer close(out)      // В конце функции закрываем канал, чтобы сообщить другим горутинам что больше значений не будет
		for num := range in { // Читаем значения из канала in
			out <- num * num // Возводим значение в квадрат и записываем в канал out
		}
	}()

	// Создаем WaitGroup для синхронизации горутин
	var wg sync.WaitGroup
	// Добавляем в счетчик 1
	wg.Add(1)

	go func() {
		defer wg.Done()        // Декрементируем счетчик в конце функции
		for num := range out { // Считываем числа из канала out
			fmt.Println(num) // Выводим число в stdout
		}
	}()

	for _, num := range arr { // Записываем значения из массива в канал
		in <- num
	}
	close(in) // Закрываем канал после того как запишем в него все значения
	wg.Wait() // Блокируем главную горутину пока счетчик не обнулится
}
